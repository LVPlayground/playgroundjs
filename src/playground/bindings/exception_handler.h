// Copyright 2015 Las Venturas Playground. All rights reserved.
// Use of this source code is governed by the MIT license, a copy of which can
// be found in the LICENSE file.

#ifndef PLAYGROUND_BINDINGS_EXCEPTION_HANDLER_H_
#define PLAYGROUND_BINDINGS_EXCEPTION_HANDLER_H_

#include <list>

#include "base/file_path.h"
#include "bindings/runtime.h"

namespace bindings {

// Provides attribution when throwing an exception. The ExceptionHandler will remember the last 100
// Error <--> Attribution associations for thrown exceptions.
struct ScopedExceptionAttribution {
 public:
  ScopedExceptionAttribution(const base::FilePath& path, int line);
  ~ScopedExceptionAttribution();

  static bool HasAttribution();
};

void RegisterError(v8::Local<v8::Value> error);

// A scoped exception source may be used to improve the clarity of exceptions generated by code ran
// because we invoked JavaScript for some reason. The reason will be included in the output.
class ScopedExceptionSource {
 public:
  explicit ScopedExceptionSource(const std::string& source);
  ~ScopedExceptionSource();
};

// The exception handler handles exceptions that are not handled in the JavaScript code by
// outputting them to the console in a neatly formatted fashion.
class ExceptionHandler {
 public:
  ExceptionHandler(Runtime* runtime, Runtime::Delegate* runtime_delegate);
  ~ExceptionHandler();

  enum class MessageSource {
    kScript,
    kInvocation,
    kRejectedPromise
  };

  // Registers an associated between the |error| and the attribution.
  void RegisterAttributedError(v8::Local<v8::Value> error, const base::FilePath& path, int line);

  // Called when the v8 runtime generates a message. It may also be called manually by any code
  // that maintains a v8::TryCatch before doing an operation on the engine.
  void OnMessage(v8::Local<v8::Message> message, v8::Local<v8::Value> error, MessageSource source,
                 v8::Local<v8::Promise> promise = v8::Local<v8::Promise>());

  // Revokes queued messages for the |promise|. Needed to support async try/catch statements.
  void RevokeQueuedMessages(v8::Local<v8::Promise> promise);

  // Flushes the queued unexpected promise revocations.
  void FlushMessageQueue();

  // Called when a non-recoverable error occurs within the runtime.
  void OnFatalError(const char* location, const char* message);

 private:
  Runtime* runtime_;
  Runtime::Delegate* runtime_delegate_;

  // Structure to store queued up messages. Necessary to support async try/catch statements.
  struct QueuedMessage {
    QueuedMessage(v8::Isolate* isolate, v8::Local<v8::Message> message, v8::Local<v8::Value> error,
                  MessageSource message_source, v8::Local<v8::Promise> promise)
        : message(isolate, message), error(isolate, error), message_source(message_source),
          promise(isolate, promise) {}

    QueuedMessage() = delete;
    QueuedMessage(QueuedMessage& other) = delete;

    v8::Persistent<v8::Message> message;
    v8::Persistent<v8::Value> error;
    MessageSource message_source;

    v8::Persistent<v8::Promise> promise;
  };

  struct Attribution {
    Attribution(v8::Isolate* isolate, v8::Local<v8::Value> error, const base::FilePath& path, int line)
        : error(isolate, error), path(path), line(line) {}

    Attribution() = delete;
    Attribution(Attribution& other) = delete;

    v8::Persistent<v8::Value> error;

    base::FilePath path;
    int line;
  };

  // List of thrown errors with their associated attribution. Will store a maximum
  // of a hundred associations to avoid bloating memory usage.
  std::list<Attribution> registered_attribution_;

  // Linked list of queued messages. Avoids needing to make copies.
  std::list<QueuedMessage> queued_messages_;
};

}  // namespace bindings

#endif  // PLAYGROUND_BINDINGS_EXCEPTION_HANDLER_H_
